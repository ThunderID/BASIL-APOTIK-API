<?php
namespace App\Models\HK;

use Illuminate\Database\Eloquent\Model;

use App\User;
use App\Room;
use App\Org;

class LostAndFound extends Model
{
    // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// TRAITS
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// VARIABLES
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	protected $fillable = [
		'org_id',
		'finder_id',
		'found_at',
		'found_location',
		'found_room_id',
		'claimant_id',
		'claimed_at',
		'claimed_note',
		'keeper_id',
		'stored_at',
		'stored_location',
		'item_type',
		'item_description',
		'photos',
	];
	public $timestamps = true;
	protected $hidden = [
	];
	protected $casts = [
		'photos'	=> 'array',
	];
	protected $dates = [
		'deleted_at'
	];
	protected $touches = [
	];
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// CONFIGURATIONS
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// BOOT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// CONSTRUCT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// RELATIONSHIP
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function org() {
		return $this->belongsTo(Org::class, 'org_id');
	}
	public function finder() {
		return $this->belongsTo(User::class, 'finder_id');
	}
	public function claimant() {
		return $this->belongsTo(User::class, 'claimant_id');
	}
	public function keeper() {
		return $this->belongsTo(User::class, 'keeper_id');
	}

	public function room() {
		return $this->belongsTo(Room::class, 'found_room_id');
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// BOOT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// STATIC FUNCTION
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// FUNCTION
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function getRules()
	{
		$rules['finder_id']        = ['required', 'exists:' . app()->make(User::class)->getTable() . ',id' ];
		$rules['found_at']         = ['required', 'date', 'before_or_equal:now'];
		$rules['found_location']   = ['nullable', 'required_without:found_room_id', 'string'];
		$rules['found_room_id']    = ['nullable', 'exists:' . app()->make(Room::class)->getTable() . ',id'];
		
		$rules['keeper_id']        = ['nullable', 'exists:' . app()->make(User::class)->getTable() . ',id'];
		$rules['stored_at']        = ['nullable', 'required_with:keeper_id', 'date', 'before_or_equal:now'];
		$rules['stored_location']  = ['nullable', 'required_with:keeper_id', 'string'];
		$rules['org_id']       	   = ['nullable', 'exists:' . app()->make(Org::class)->getTable() . ',id'];
		$rules['claimant_id']      = ['nullable', 'exists:' . app()->make(User::class)->getTable() . ',id' ];
		$rules['claimed_at']       = ['nullable', 'required_with:claimant_id', 'date', 'before_or_equal:now'];
		$rules['claimed_note']     = ['nullable', 'required_with:claimant_id', 'string'];
		
		$rules['item_type']        = ['required', 'string'];
		$rules['item_description'] = ['required', 'string'];
		$rules['photos'] 		   = ['nullable', 'array'];
		$rules['photos.*'] 		   = ['nullable', 'url'];
		
		return $rules;
	}
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// ACCESSOR
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// MUTATOR
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// QUERY
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function scopeNotYetStored($q)
	{
		return $q->whereNull('stored_at');
	}
	public function scopeNotYetClaimed($q)
	{
		return $q->whereNull('claimed_at');
	}
	public function scopeUnclaimedMoreThanNDays($q, Int $days)
	{
		return $q->where('found_at', '<', now()->subDays($days));
	}
	public function scopeFoundBy($q, Int $user_id)
	{
		return $q->where('finder_id', '=', $user_id);
	}
	public function scopeStoredBy($q, Int $user_id)
	{
		return $q->where('keeper_id', '=', $user_id);
	}
}