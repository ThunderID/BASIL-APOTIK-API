<?php

namespace App\Models\Membership;

use Illuminate\Database\Eloquent\Model;

class Membership extends Model
{
    // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// TRAITS
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// VARIABLES
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	protected $fillable = [
		'user_id',
		'partner_id',
		'started_at',
		'level',
		'org_group_id'
	];

	public $timestamps = true;

	protected $hidden = [
	];

	protected $casts = [
	];

	protected $dates = [
		'deleted_at',
		'started_at'
	];

	protected $touches = [
	];

	protected $observables = [
	];

	protected $appends = ['total_point', 'level_next', 'level_achieve', 'percentage_achieve'];

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// CONFIGURATIONS
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	const SILVER   	= 'silver';
	const GOLD   	= 'gold';
	const PLATINUM	= 'platinum';

	const LEVEL = [
		self::SILVER, 
		self::SILVER	=> self::GOLD,
		self::GOLD	 	=> self::PLATINUM,
		self::PLATINUM 	=> '',
	];
	const TARGET = [
		self::SILVER	=> 0,
		self::GOLD	 	=> 650000001,
		self::PLATINUM 	=> 1000000001,
	];

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// BOOT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// CONSTRUCT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// RELATIONSHIP
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function partner() {
		return $this->belongsTo(\App\Partner::class);
	}

	public function user() {
		return $this->belongsTo(\App\User::class);
	}

	public function org_group() {
		return $this->belongsTo(\App\OrgGroup::class);
	}

	public function member_points() {
		return $this->hasMany(MemberPoint::class, 'org_group_id', 'org_group_id')->where('user_id', $this->user_id)->where('partner_id', $this->partner_id)/**->where('date', '>=', $this->started_at)**/;
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// BOOT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// STATIC FUNCTION
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// FUNCTION
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function getRules()
	{
		$rules['org_group_id']	= ['required', 'integer', 'exists:'. app()->make(\App\OrgGroup::class)->getTable() . ',id'];
		$rules['user_id']		= ['nullable', 'integer', 'exists:'. app()->make(\App\User::class)->getTable() . ',id'];
		$rules['partner_id']	= ['nullable', 'integer', 'exists:'. app()->make(\App\Partner::class)->getTable() . ',id'];
		$rules['started_at']	= ['required', 'date'];
		$rules['level']			= ['required', 'string'];
		
		return $rules;
	}
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// ACCESSOR
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function getTotalPointAttribute() {
		return $this->member_points->sum('amount');
	}

	public function getLevelAchieveAttribute() {
		return $this->member_points->sum('net_revenue');
	}

	public function getLevelNextAttribute() : string
	{
		if (!isset($this->level))
		{
			return Static::LEVEL[0];
		}
		elseif (isset(Static::LEVEL[$this->level]))
		{
			return Static::LEVEL[$this->level];
		}
		else
		{
			return [];
		}
	}
	
	public function getPercentageAchieveAttribute() {
		return max(1, $this->member_points->sum('net_revenue')/max(1, self::TARGET[$this->level_next]));
	}
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// MUTATOR
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// QUERY
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
}
