<?php

namespace App\Models\Focashier;

use Illuminate\Database\Eloquent\Model;

class PaidOut extends Model
{
    // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// TRAITS
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// VARIABLES
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	protected $fillable = [
		'org_id',
		'no',
		'date',
		'guest_name',
		'ref_id',
		'ref_type',
		'type',
		'method',
		'platform',
		'lines',
	];

	public $timestamps = true;

	protected $hidden = [
	];

	protected $casts = [
		'lines'		=> 'array'
	];

	protected $dates = [
		'deleted_at', 'date'
	];

	protected $touches = [
	];

	protected $observables = [
	];

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// CONFIGURATIONS
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	CONST TYPE 		= ['PAID_OUT'];
	CONST METHOD 	= ['CASH', 'CREDIT_CARD', 'DEBIT_CARD', 'BANK_TRANSFER'];


	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// BOOT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// CONSTRUCT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// RELATIONSHIP
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function org()
	{
		return $this->belongsTo(\App\Org::class);
	}
	
	public function ref()
	{
		return $this->morphTo();
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// BOOT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// STATIC FUNCTION
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// FUNCTION
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function getRules()
	{
		$rules['org_id']	= ['required', 'integer', 'exists:'. app()->make(\App\Org::class)->getTable() . ',id'];
		$rules['no'] 		= ['nullable', 'string'];
		$rules['date'] 		= ['nullable', 'string'];

		$rules['guest_name']= ['required', 'string'];
		$rules['ref_id'] 	= ['required', 'numeric'];
		$rules['ref_type'] 	= ['required', 'string'];
		
		$rules['type']   			= ['required', 'string', 'in:'.implode(',', SELF::TYPE)];
		$rules['platform']			= ['nullable', 'required_if:method,CREDIT_CARD,DEBIT_CARD'];
		$rules['method'] 			= ['required', 'string', 'in:'.implode(',', SELF::METHOD)];
		$rules['lines']  				= ['required', 'array'];
		$rules['lines.*.description']	= ['required', 'string'];
		$rules['lines.*.amount']  		= ['required', 'numeric', 'min:1'];
		
		return $rules;
	}
	
	public function generateNo() {
		$prefix 	= str_pad($this->org_id, 4, '0', STR_PAD_LEFT).'.'.now()->format('ym');
		$idx 		= PaidOut::where('no', 'like', $prefix.'%')->count() + 1;
		do{
			$no 	= $prefix.'.'.str_pad($idx, 4, '0', STR_PAD_LEFT);
			$exists	= PaidOut::where('no', $no)->first();
			$idx++;
		}while ($exists);
		
		return $no;
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// ACCESSOR
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function getAmountAttribute()
	{
		return array_Sum(array_column($this->lines, 'amount'));
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// MUTATOR
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// QUERY
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function scopeGuestName ($q, String $v) 
	{
		return $q->where('guest_name', 'like', str_replace('*', '%', $v));
	}
}
