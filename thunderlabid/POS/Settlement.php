<?php

namespace Thunderlabid\POS;

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// LARAVEL
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Validation\Rule;

class Settlement extends Model
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// TRAITS
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// VARIABLES
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	protected $table = 'POS_settlements';
	public $timestamps = true;
	protected $fillable = [
		'invoice_id',
		'no',
		'date',
		'type',
		'ref_no',
		'amount',
		'cancelled_at',
	];

	protected $hidden = [
	];

	protected $casts = [
	];

	protected $dates = [
		'deleted_at', 'date', 'cancelled_at'
	];

	protected $touches = [
	];

	protected $observables = [
	];

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// CONFIGURATIONS
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	const CASH        	= 'CASH';
	const DEBIT_CARD  	= 'DEBIT_CARD';
	const CREDIT_CARD 	= 'CREDIT_CARD';
	const GUEST_ACCOUNT	= 'GUEST_ACCOUNT';
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// BOOT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// CONSTRUCT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// RELATIONSHIP
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function invoice()
	{
		return $this->belongsTo(get_class(app()->make(Invoice::class)));
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// BOOT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// STATIC FUNCTION
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// FUNCTION
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public static function getTypes()
	{
		return [Static::CASH, Static::DEBIT_CARD, Static::CREDIT_CARD, Static::GUEST_ACCOUNT];
	}

	public function generateNo() {
		$prefix 	= 'POS.SETT.'.str_pad($this->org_id, 4, '0', STR_PAD_LEFT).'.'.now()->format('ym');
		$idx 		= self::where('no', 'like', $prefix.'%')->count() + 1;
		do{
			$no 	= $prefix.'.'.str_pad($idx, 4, '0', STR_PAD_LEFT);
			$exists	= self::where('no', $no)->first();
			$idx++;
		}while ($exists);
		
		return $no;
	}

	public function getRules()
	{
		$rules['no']         = ['nullable', Rule::unique($this->table)->ignore($this->id)];
		$rules['invoice_id'] = ['required', 'exists:' . app()->make(Invoice::class)->getTable() . ',id'];
		$rules['date']       = ['required', 'date'];
		$rules['type']       = ['required', 'string', 'in:' . implode(',',$this::getTypes())];
		$rules['ref_no']     = ['nullable', 'string'];
		$rules['amount']     = ['required', 'numeric', 'gte:0'];

		if ($this->invoice_id)
		{
			$rules['date'][] = 'after_or_equal:' . $this->invoice->date;
			$rules['amount'][] = 'gte:' .ceil($this->invoice->getBalance([$this->id]));
		}
		
		return $rules;
	}

	public function cancel()
	{
		$this->attributes['cancelled_at'] = now();
		return $this->save();
	}
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// ACCESSOR
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// MUTATOR
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// QUERY
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function scopeNo ($q, String $v) 
	{
		return $q->where('no', 'like', str_replace('*', '%', $v));
	}

	public function scopeDateLt ($q, \Carbon\Carbon $v) 
	{
		return $q->where('date', '<', $v);
	}

	public function scopeDateLte ($q, \Carbon\Carbon $v) 
	{
		return $q->where('date', '<=', $v);
	}

	public function scopeDateGt ($q, \Carbon\Carbon $v) 
	{
		return $q->where('date', '>', $v);
	}

	public function scopeDateGte ($q, \Carbon\Carbon $v) 
	{
		return $q->where('date', '>=', $v);
	}	

	public function scopeType($q, String $v)
	{
		return $q->where('type', 'like', str_replace('*', '%', $v));
	}

	public function scopeRefNo($q, String $v)
	{
		return $q->where('ref_no', 'like', str_replace('*', '%', $v));
	}
}