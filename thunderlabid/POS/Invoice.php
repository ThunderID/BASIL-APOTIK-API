<?php

namespace Thunderlabid\POS;

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// LARAVEL
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Validation\Rule;

class Invoice extends Model
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// TRAITS
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	use Traits\Model\HasCustomModelEvent;

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// VARIABLES
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	protected $table = 'POS_invoices';
	public $timestamps = true;
	protected $fillable = [
		'pos_point_id',
		'no',
		'date',
		'customer',
		'discount',
		'tax',
		'lines',
	];

	protected $hidden = [
	];

	protected $casts = [
		'lines'	=> 'array'
	];

	protected $dates = [
		'deleted_at', 'date', 'cancelled_at'
	];

	protected $touches = [
	];

	protected $observables = [
		'voiding', 'voided'
	];

	protected $appends = [
	];

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// CONFIGURATIONS
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// BOOT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// CONSTRUCT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// RELATIONSHIP
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function pos_point()
	{
		return $this->belongsTo(get_class(app()->make(POSPoint::class)), 'pos_point_id');
	}

	public function settlements()
	{
		return $this->hasMany(get_class(app()->make(Settlement::class)))->latest('date')->latest('created_at');
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// BOOTx
	// ---------------------------------------------------------------------------------x-----------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// STATIC FUNCTION
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// FUNCTION
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function getRules()
	{
		$rules['no']                 = ['nullable', Rule::unique($this->table)->ignore($this->id)];
		$rules['date']               = ['required', 'date'];
		$rules['customer']           = ['nullable', 'string'];
		$rules['discount']           = ['nullable', 'numeric', 'gte:0'];
		$rules['tax']                = ['required', 'numeric', 'gte:0'];
		$rules['lines']              = ['required', 'array'];
		$rules['lines.*.product_id'] = ['required'];
		$rules['lines.*.code']       = ['required', 'string'];
		$rules['lines.*.name']       = ['required', 'string'];
		$rules['lines.*.qty']        = ['required', 'numeric', 'gt:0'];
		$rules['lines.*.price']      = ['required', 'numeric', 'min:0'];
		$rules['lines.*.discount']   = ['required', 'numeric', 'min:0', 'lte:lines.*.price'];
		$rules['cancelled_at']       = ['nullable', 'date'];
		
		return $rules;
	}

	public function cancel()
	{
		$this->attributes['cancelled_at'] = now();
		return $this->save();
	}

	public function getTotalInvoiceLine()
	{
		$total = 0;
		foreach ($this->lines as $line)
		{
			$total += $line['qty'] * ($line['price'] - $line['discount']);
		}

		return $total;
	}

	public function getTotalAfterDiscount()
	{
		$total = 0;
		foreach ($this->lines as $line)
		{
			$total += $line['qty'] * ($line['price'] - $line['discount']);
		}

		return $total - $this->discount;
	}

	public function getBalance(Array $except_settlement_ids = [])
	{
		$settled = 0;
		foreach ($this->settlements as $settlement)
		{
			if (!$settlement->cancelled_at && !in_array($settlement->id, $except_settlement_ids))
			{
				$settled += $settlement->amount;
			}
		}

		return $this->getTotalAfterDiscount() + ($this->getTotalAfterDiscount() * config()->get('tax.full')) - $settled;
	}


	public function generateNo() {
		$prefix 	= 'POS.'.str_pad($this->org_id, 4, '0', STR_PAD_LEFT).'.'.now()->format('ym');
		$idx 		= self::where('no', 'like', $prefix.'%')->count() + 1;
		do{
			$no 	= $prefix.'.'.str_pad($idx, 4, '0', STR_PAD_LEFT);
			$exists	= self::where('no', $no)->first();
			$idx++;
		}while ($exists);
		
		return $no;
	}
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// ACCESSOR
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// MUTATOR
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// QUERY
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function scopeNo ($q, String $v) 
	{
		return $q->where('no', 'like', str_replace('*', '%', $v));
	}

	public function scopeDateLt ($q, \Carbon\Carbon $v) 
	{
		return $q->where('date', '<', $v);
	}

	public function scopeDateLte ($q, \Carbon\Carbon $v) 
	{
		return $q->where('date', '<=', $v);
	}

	public function scopeDateGt ($q, \Carbon\Carbon $v) 
	{
		return $q->where('date', '>', $v);
	}

	public function scopeDateGte ($q, \Carbon\Carbon $v) 
	{
		return $q->where('date', '>=', $v);
	}	

	public function scopeCustomer($q, String $v) 
	{
		return $q->where('customer', 'like', str_replace('*', '%', $v));
	}

	
}