<?php

namespace Thunderlabid\WMS;

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// LARAVEL
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Validation\Rule;

class GRN extends Model
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// TRAITS
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// VARIABLES
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	protected $table = 'WMS_GRNs';
	public $timestamps = true;
	protected $fillable = [
		'warehouse_id',
		'no',
		'date',
		'ref_id',
		'ref_type',
		'lines',
	];

	protected $hidden = [
	];

	protected $casts = [
		'lines'	=> 'array'
	];

	protected $dates = [
		'deleted_at', 'date'
	];

	protected $touches = [
	];

	protected $observables = [
	];

	protected $appends = [
	];

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// CONFIGURATIONS
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// BOOT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// CONSTRUCT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// RELATIONSHIP
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function warehouse()
	{
		return $this->belongsTo(get_class(app()->make(Warehouse::class)), 'warehouse_id');
	}

	public function stock_cards()
	{
		return $this->hasMany(get_class(app()->make(StockCard::class)), 'ref_id')->where('ref_type', get_class(app()->make(GRN::class)));
	}
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// BOOTx
	// ---------------------------------------------------------------------------------x-----------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// STATIC FUNCTION
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// FUNCTION
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function getRules()
	{
		$rules['no']                 = ['nullable', Rule::unique($this->table)->ignore($this->id)];
		$rules['date']               = ['required', 'date'];
		$rules['warehouse_id']		 = ['required', 'integer', 'exists:'. app()->make(Warehouse::class)->getTable() . ',id'];
		$rules['ref_id']           	 = ['nullable', 'int'];
		$rules['ref_type']           = ['nullable', 'string'];
		$rules['lines']              = ['required', 'array'];
		$rules['lines.*.product_id'] = ['required'];
		$rules['lines.*.sku']        = ['required', 'string'];
		$rules['lines.*.name']       = ['required', 'string'];
		$rules['lines.*.qty']        = ['required', 'numeric', 'gt:0'];
		
		return $rules;
	}

	public function generateNo() {
		$prefix 	= 'WMS.'.str_pad($this->org_id, 4, '0', STR_PAD_LEFT).'.'.now()->format('ym');
		$idx 		= self::where('no', 'like', $prefix.'%')->count() + 1;
		do{
			$no 	= $prefix.'.'.str_pad($idx, 4, '0', STR_PAD_LEFT);
			$exists	= self::where('no', $no)->first();
			$idx++;
		}while ($exists);
		
		return $no;
	}
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// ACCESSOR
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// MUTATOR
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// QUERY
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function scopeNo ($q, String $v) 
	{
		return $q->where('no', 'like', str_replace('*', '%', $v));
	}

	public function scopeDateLt ($q, \Carbon\Carbon $v) 
	{
		return $q->where('date', '<', $v);
	}

	public function scopeDateLte ($q, \Carbon\Carbon $v) 
	{
		return $q->where('date', '<=', $v);
	}

	public function scopeDateGt ($q, \Carbon\Carbon $v) 
	{
		return $q->where('date', '>', $v);
	}

	public function scopeDateGte ($q, \Carbon\Carbon $v) 
	{
		return $q->where('date', '>=', $v);
	}	
}