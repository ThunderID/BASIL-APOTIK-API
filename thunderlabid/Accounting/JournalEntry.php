<?php

namespace Thunderlabid\Accounting;

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// LARAVEL
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use DB;
use Illuminate\Validation\Rule;

class JournalEntry extends Model
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// TRAITS
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	use SoftDeletes, Traits\Model\HasCustomModelEvent;

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// VARIABLES
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	protected $table = 'ACCT_journal_entries';
	public $timestamps = true;
	protected $fillable = [
		'org_id',
		'no',
		'ref_type',
		'ref_id',
		'date',
		'note',
		'void_at',
		'locked_at',
		'lines',
	];

	protected $hidden = [
	];

	protected $casts = [
		'lines'	=> 'array'
	];

	protected $dates = [
		'deleted_at', 
		'date',
		'void_at',
		'locked_at'
	];

	protected $touches = [
	];

	protected $appends = [
	];

	/*=====================================
	=            CONFIGURATION            =
	=====================================*/

	const DOC_PREFIX         = 'JE';
	const DOC_COUNTER_LENGTH = 5;
	const EDITABLE_STATUS    = [];

	/*----------  INVOICE TERM  ----------*/
	
	/*=====  End of CONFIGURATION  ======*/
	


	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// BOOT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// CONSTRUCT
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// RELATIONSHIP
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function ref()
	{
		return $this->morphTo();
	}

	public function journal_entry_lines()
	{
		return $this->hasMany(app()->make(JournalEntryLine::class), 'journal_entry_id');
	}

	public function org()
	{
		return $this->belongsTo(\App\Org::class);
	}
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// STATIC FUNCTION
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// FUNCTION
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function getRules()
	{
		if ($this->no)
		{
			$rules['no'][] = Rule::unique($this->table)->ignore($this->id);
		}

		$rules['org_id'] 	= ['required', 'int'];
		$rules['ref_type']	= ['nullable', 'string'];
		$rules['ref_id']	= ['nullable', 'required_with:ref_type', 'integer'];
		$rules['note']		= ['nullable', 'string'];
		$rules['no']		= ['nullable', 'required_with:date', 'string'];
		$rules['void_at']	= ['nullable', 'date', 'after_or_equal:date'];
		$rules['locked_at']	= ['nullable', 'date', 'after_or_equal:date'];
		$rules['date']		= ['nullable', 'required_with:no', 'date'];

		$rules['lines']                     = ['required', 'array'];
		$rules['lines.*.coa_id']            = ['required', 'exists:' . with(app()->make(COA::class))->getTable() . ',id'];
		$rules['lines.*.subsidiary_coa_id'] = ['required', 'exists:' . with(app()->make(SubsidiaryCOA::class))->getTable() . ',id'];
		$rules['lines.*.amount']            = ['required', 'numeric'];
		
		return $rules;
	}

	public static function getNextNo() {
		$prefix = Static::DOC_PREFIX . '/' . date('Ym') . '/';
		$dt = Static::no($prefix."*")
		->orderby('no', 'desc')
		->first();

		if (!$dt) {
			$no = 1;
		} else {
			$no = intval(substr($dt->no, strlen($prefix)));
			$no++;
		}

		return $prefix . str_pad($no, Static::DOC_COUNTER_LENGTH, '0', STR_PAD_LEFT);
	}

	public function autoSetNo()
	{
		if (!isset($this->attributes['no']) || !$this->attributes['no'])
		{
			$this->attributes['no'] = Static::getNextNo();
			$this->attributes['date'] = now();
		}
	}
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// ACCESSOR
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// MUTATOR
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// QUERY
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public function scopeNo ($q, String $v) {
		if(str_replace('*','',$v) == '') return $q;
		return $q->where('no', 'like', str_replace('*', '%', $v));
	}

	public function scopeRefType ($q, String $v) {
		return $q->where('ref_type', '=', $v);;
	}

	public function scopeRefId ($q, Int $v) {
		return $q->where('ref_id', '=', $v);;
	}
}